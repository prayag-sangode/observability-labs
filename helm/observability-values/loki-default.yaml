kubeVersionOverride: null

global:
  image:
    registry: null
  priorityClassName: null
  clusterDomain: "cluster.local"
  dnsService: "kube-dns"
  dnsNamespace: "kube-system"
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumes: []
  extraVolumeMounts: []
nameOverride: null
fullnameOverride: null
clusterLabelOverride: null
imagePullSecrets: []
deploymentMode: SimpleScalable
loki:
  livenessProbe: {}
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 30
    timeoutSeconds: 1
  image:
    registry: docker.io
    repository: grafana/loki
    tag: 3.5.3
    digest: null
    pullPolicy: IfNotPresent
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  serviceAnnotations: {}
  serviceLabels: {}
  revisionHistoryLimit: 10
  podSecurityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsNonRoot: true
    runAsUser: 10001
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
  enableServiceLinks: true

  configStorageType: ConfigMap
  configObjectName: '{{ include "loki.name" . }}'
  generatedConfigObjectName: '{{ include "loki.name" . }}'
  config: |
    {{- if .Values.enterprise.enabled}}
    {{- tpl .Values.enterprise.config . }}
    {{- else }}
    auth_enabled: {{ .Values.loki.auth_enabled }}
    {{- end }}

    {{- with .Values.loki.server }}
    server:
      {{- toYaml . | nindent 2}}
    {{- end}}

    {{- with .Values.loki.pattern_ingester }}
    pattern_ingester:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    memberlist:
    {{- if .Values.loki.memberlistConfig }}
      {{- toYaml .Values.loki.memberlistConfig | nindent 2 }}
    {{- else }}
    {{- if .Values.loki.extraMemberlistConfig}}
    {{- toYaml .Values.loki.extraMemberlistConfig | nindent 2}}
    {{- end }}
      join_members:
        - {{ include "loki.memberlist" . }}
        {{- with .Values.migrate.fromDistributed }}
        {{- if .enabled }}
        - {{ .memberlistService }}
        {{- end }}
        {{- end }}
    {{- end }}

    {{- with .Values.loki.ingester }}
    ingester:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.ingester_client }}
    ingester_client:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.block_builder }}
    block_builder:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- if .Values.loki.commonConfig}}
    common:
    {{- toYaml .Values.loki.commonConfig | nindent 2}}
      storage:
      {{- include "loki.commonStorageConfig" . | nindent 4}}
    {{- end}}

    {{- with .Values.loki.limits_config }}
    limits_config:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    runtime_config:
      file: /etc/loki/runtime-config/runtime-config.yaml

    {{- if .Values.chunksCache.enabled }}
    {{- with .Values.chunksCache }}
    chunk_store_config:
      chunk_cache_config:
        default_validity: {{ .defaultValidity }}
        background:
          writeback_goroutines: {{ .writebackParallelism }}
          writeback_buffer: {{ .writebackBuffer }}
          writeback_size_limit: {{ .writebackSizeLimit }}
        memcached:
          batch_size: {{ .batchSize }}
          parallelism: {{ .parallelism }}
        memcached_client:
          addresses: {{ .addresses }}
          consistent_hash: true
          timeout: {{ .timeout }}
          max_idle_conns: 72
      {{- end }}
      {{- with .Values.chunksCache.l2 }}
      {{- if .enabled }}
      l2_chunk_cache_handoff: {{ .l2ChunkCacheHandoff }}
      chunk_cache_config_l2:
        default_validity: {{ .defaultValidity }}
        background:
          writeback_goroutines: {{ .writebackParallelism }}
          writeback_buffer: {{ .writebackBuffer }}
          writeback_size_limit: {{ .writebackSizeLimit }}
        memcached:
          batch_size: {{ .batchSize }}
          parallelism: {{ .parallelism }}
        memcached_client:
          addresses: {{ .addresses }}
          consistent_hash: true
          timeout: {{ .timeout }}
          max_idle_conns: 72
      {{- end }}
      {{- end }}
    {{- end }}

    {{- if .Values.loki.schemaConfig }}
    schema_config:
    {{- toYaml .Values.loki.schemaConfig | nindent 2}}
    {{- end }}

    {{- if .Values.loki.useTestSchema }}
    schema_config:
    {{- toYaml .Values.loki.testSchemaConfig | nindent 2}}
    {{- end }}

    {{- if .Values.ruler.enabled }}
    {{ include "loki.rulerConfig" . }}
    {{- end }}

    {{- if and .Values.loki.storage.use_thanos_objstore .Values.ruler.enabled}}
    ruler_storage:
      {{- include "loki.rulerThanosStorageConfig" . | nindent 2 }}
    {{- end }}

    {{- if or .Values.tableManager.retention_deletes_enabled .Values.tableManager.retention_period }}
    table_manager:
      retention_deletes_enabled: {{ .Values.tableManager.retention_deletes_enabled }}
      retention_period: {{ .Values.tableManager.retention_period }}
    {{- end }}

    query_range:
      align_queries_with_step: true
      {{- with .Values.loki.query_range }}
      {{- tpl (. | toYaml) $ | nindent 2 }}
      {{- end }}
      {{- if .Values.resultsCache.enabled }}
      {{- with .Values.resultsCache }}
      cache_results: true
      results_cache:
        cache:
          default_validity: {{ .defaultValidity }}
          background:
            writeback_goroutines: {{ .writebackParallelism }}
            writeback_buffer: {{ .writebackBuffer }}
            writeback_size_limit: {{ .writebackSizeLimit }}
          memcached_client:
            addresses: {{ .addresses }}
            consistent_hash: true
            timeout: {{ .timeout }}
            update_interval: 1m
      {{- end }}
      {{- end }}

    {{- with .Values.loki.storage_config }}
    storage_config:
        {{- if not (hasKey $.Values.loki.storage_config "use_thanos_objstore") }}
        use_thanos_objstore: {{ $.Values.loki.storage.use_thanos_objstore }}
        {{- end }}
        {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.query_scheduler }}
    query_scheduler:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.compactor }}
    compactor:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.compactor_grpc_client }}
    compactor_grpc_client:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.analytics }}
    analytics:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- if .Values.loki.ui.enabled }}
    ui:
      enabled: true
      discovery:
        join_peers:
          - '{{ include "loki.queryFrontendFullname" . }}.{{ $.Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}'
    {{- end }}
    {{- with .Values.loki.querier }}
    querier:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.index_gateway }}
    index_gateway:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.frontend }}
    frontend:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.frontend_worker }}
    frontend_worker:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.distributor }}
    distributor:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    tracing:
      enabled: {{ .Values.loki.tracing.enabled }}

    {{- with .Values.loki.bloom_build }}
    bloom_build:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.bloom_gateway }}
    bloom_gateway:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.operational_config }}
    operational_config:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
  auth_enabled: true
  memberlistConfig: {}
  extraMemberlistConfig: {}
  tenants: []
  server:
    http_listen_port: 3100
    grpc_listen_port: 9095
    http_server_read_timeout: 600s
    http_server_write_timeout: 600s
  limits_config:
    reject_old_samples: true
    reject_old_samples_max_age: 168h
    max_cache_freshness_per_query: 10m
    split_queries_by_interval: 15m
    query_timeout: 300s
    volume_enabled: true
  runtimeConfig: {}
  commonConfig:
    path_prefix: /var/loki
    replication_factor: 3
    compactor_grpc_address: '{{ include "loki.compactorAddress" . }}'
  storage:
    type: s3
    s3:
      s3: null
      endpoint: null
      region: null
      secretAccessKey: null
      accessKeyId: null
      signatureVersion: null
      s3ForcePathStyle: false
      insecure: false
      http_config: {}
      backoff_config: {}
      disable_dualstack: false
    gcs:
      chunkBufferSize: 0
      requestTimeout: "0s"
      enableHttp2: true
    azure:
      accountName: null
      accountKey: null
      connectionString: null
      useManagedIdentity: false
      useFederatedToken: false
      userAssignedId: null
      requestTimeout: null
      endpointSuffix: null
      chunkDelimiter: null
    swift:
      auth_version: null
      auth_url: null
      internal: null
      username: null
      user_domain_name: null
      user_domain_id: null
      user_id: null
      password: null
      domain_id: null
      domain_name: null
      project_id: null
      project_name: null
      project_domain_id: null
      project_domain_name: null
      region_name: null
      container_name: null
      max_retries: null
      connect_timeout: null
      request_timeout: null
    filesystem:
      chunks_directory: /var/loki/chunks
      rules_directory: /var/loki/rules

    use_thanos_objstore: false

    object_store:
      type: s3
      storage_prefix: null
      s3:
        endpoint: null
        region: null
        access_key_id: null
        secret_access_key: null
        insecure: false
        sse: {}
        http: {}

      gcs:
        bucket_name: null
        service_account: null

      azure:
        account_name: null
        account_key: null

  schemaConfig: {}
  useTestSchema: false
  testSchemaConfig:
    configs:
      - from: 2024-04-01
        store: tsdb
        object_store: '{{ include "loki.testSchemaObjectStore" . }}'
        schema: v13
        index:
          prefix: index_
          period: 24h
  rulerConfig:
    wal:
      dir: /var/loki/ruler-wal
  structuredConfig: {}
  query_scheduler: {}
  storage_config:
    boltdb_shipper:
      index_gateway_client:
        server_address: '{{ include "loki.indexGatewayAddress" . }}'
    tsdb_shipper:
      index_gateway_client:
        server_address: '{{ include "loki.indexGatewayAddress" . }}'
    bloom_shipper:
      working_directory: /var/loki/data/bloomshipper
    hedging:
      at: "250ms"
      max_per_second: 20
      up_to: 3
  compactor: {}
  compactor_grpc_client: {}
  pattern_ingester:
    enabled: false
  analytics: {}
  ui:
    enabled: false
    gateway:
      enabled: true
  query_range: {}
  querier: {}
  ingester: {}
  ingester_client: {}
  block_builder: {}
  index_gateway:
    mode: simple
  frontend:
    scheduler_address: '{{ include "loki.querySchedulerAddress" . }}'
    tail_proxy_url: '{{ include "loki.querierAddress" . }}'
  frontend_worker:
    scheduler_address: '{{ include "loki.querySchedulerAddress" . }}'
  distributor: {}
  tracing:
    enabled: false
  bloom_build:
    enabled: false
    builder:
      planner_address: '{{ include "loki.bloomPlannerAddress" . }}'
  bloom_gateway:
    enabled: false
    client:
      addresses: '{{ include "loki.bloomGatewayAddresses" . }}'
  operational_config: {}

enterprise:
  enabled: false
  version: 3.5.2
  cluster_name: null
  license:
    contents: "NOTAVALIDLICENSE"
  useExternalLicense: false
  externalLicenseName: null
  externalConfigName: ""
  gelGateway: true
  adminApi:
    enabled: true
  config: |
    {{- if .Values.enterprise.adminApi.enabled }}
    admin_client:
      {{ include "enterprise-logs.adminAPIStorageConfig" . | nindent 2 }}
    {{ end }}
    auth:
      type: {{ .Values.enterprise.adminApi.enabled | ternary "enterprise" "trust" }}
    auth_enabled: {{ .Values.loki.auth_enabled }}
    cluster_name: {{ include "loki.clusterName" . }}
    license:
      path: /etc/loki/license/license.jwt
  image:
    registry: docker.io
    repository: grafana/enterprise-logs
    tag: 3.5.2
    digest: null
    pullPolicy: IfNotPresent
  adminToken:
    secret: null
    additionalNamespaces: []
  canarySecret: null
  tokengen:
    enabled: true
    targetModule: "tokengen"
    adminTokenSecret: null
    extraArgs: []
    rbac:
      create: true
    env: []
    labels: {}
    annotations: {}
    affinity: {}
    nodeSelector: {}
    tolerations: []
    extraVolumes: []
    extraVolumeMounts: []
    securityContext:
      runAsNonRoot: true
      runAsGroup: 10001
      runAsUser: 10001
      fsGroup: 10001
    extraEnvFrom: []
    priorityClassName: ""
  provisioner:
    enabled: true
    provisionedSecretPrefix: null
    hookType: "post-install"
    apiUrl: '{{ include "loki.address" . }}'
    additionalTenants: []
    env: []
    labels: {}
    annotations: {}
    affinity: {}
    nodeSelector: {}
    tolerations: []
    priorityClassName: null
    securityContext:
      runAsNonRoot: true
      runAsGroup: 10001
      runAsUser: 10001
      fsGroup: 10001
    image:
      registry: us-docker.pkg.dev
      repository: grafanalabs-global/docker-enterprise-provisioner-prod/enterprise-provisioner
      tag: latest
      digest: null
      pullPolicy: IfNotPresent
    extraVolumeMounts: []
    extraVolumes: []
kubectlImage:
  registry: docker.io
  repository: bitnami/kubectl
  tag: null
  digest: null
  pullPolicy: IfNotPresent

test:
  enabled: true
  canaryServiceAddress: "http://loki-canary:3500/metrics"
  prometheusAddress: ""
  timeout: 1m
  labels: {}
  annotations: {}
  image:
    registry: docker.io
    repository: grafana/loki-helm-test
    tag: "ewelch-distributed-helm-chart-17db5ee"
    digest: null
    pullPolicy: IfNotPresent
lokiCanary:
  enabled: true
  kind: DaemonSet
  push: true
  lokiurl: null
  labelname: pod
  annotations: {}
  podLabels: {}
  service:
    annotations: {}
    labels: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  dnsConfig: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  priorityClassName: null
  image:
    registry: docker.io
    repository: grafana/loki-canary
    tag: null
    digest: null
    pullPolicy: IfNotPresent
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
serviceAccount:
  create: true
  name: null
  imagePullSecrets: []
  annotations: {}
  labels: {}
  automountServiceAccountToken: true
rbac:
  pspEnabled: false
  sccEnabled: false
  sccAllowHostDirVolumePlugin: false
  pspAnnotations: {}
  namespaced: false
networkPolicy:
  enabled: false
  flavor: kubernetes
  metrics:
    podSelector: {}
    namespaceSelector: {}
    cidrs: []
  ingress:
    podSelector: {}
    namespaceSelector: {}
  alertmanager:
    port: 9093
    podSelector: {}
    namespaceSelector: {}
  externalStorage:
    ports: []
    cidrs: []
  discovery:
    port: null
    podSelector: {}
    namespaceSelector: {}
  egressWorld:
    enabled: false
  egressKubeApiserver:
    enabled: false

memberlist:
  service:
    publishNotReadyAddresses: false
    annotations: {}

adminApi:
  replicas: 1
  hostAliases: []
  extraArgs: {}
  extraEnv: []
  extraEnvFrom: []
  labels: {}
  annotations: {}
  service:
    labels: {}
    annotations: {}
  podSecurityContext:
    runAsNonRoot: true
    runAsGroup: 10001
    runAsUser: 10001
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
  strategy:
    type: RollingUpdate
  livenessProbe: {}
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  startupProbe: {}
  resources: {}
  env: []
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  affinity: {}
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  terminationGracePeriodSeconds: 60

gateway:
  enabled: true
  replicas: 1
  containerPort: 8080
  verboseLogging: true
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
    behavior: {}
  deploymentStrategy:
    type: RollingUpdate
  image:
    registry: docker.io
    repository: nginxinc/nginx-unprivileged
    tag: 1.29-alpine
    digest: null
    pullPolicy: IfNotPresent
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  lifecycle: {}
  extraVolumes: []
  extraVolumeMounts: []
  podSecurityContext:
    fsGroup: 101
    runAsGroup: 101
    runAsNonRoot: true
    runAsUser: 101
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: gateway
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  service:
    port: 80
    type: ClusterIP
    clusterIP: null
    nodePort: null
    loadBalancerIP: null
    annotations: {}
    labels: {}
  ingress:
    enabled: false
    ingressClassName: ""
    annotations: {}
    labels: {}
    hosts:
      - host: gateway.loki.example.com
        paths:
          - path: /
    tls:
      - secretName: loki-gateway-tls
        hosts:
          - gateway.loki.example.com
  basicAuth:
    enabled: false
    username: null
    password: null
    htpasswd: |
      {{- with $tenants := .Values.loki.tenants }}
        {{- range $t := $tenants }}
          {{- $username := required "All tenants must have a 'name' set" $t.name }}
          {{- if $passwordHash := $t.passwordHash }}
            {{- printf "%s:%s\n" $username $passwordHash }}
          {{- else if $password := $t.password }}
            {{- printf "%s\n" (htpasswd $username $password) }}
          {{- else }}
            {{- fail "All tenants must have a 'password' or 'passwordHash' set" }}
          {{- end }}
        {{- end }}
      {{- else }}
        {{- printf "%s\n" (htpasswd (required "'gateway.basicAuth.username' is required" .Values.gateway.basicAuth.username) (required "'gateway.basicAuth.password' is required" .Values.gateway.basicAuth.password)) }}
      {{- end }}
    existingSecret: null
  readinessProbe:
    httpGet:
      path: /
      port: http-metrics
    initialDelaySeconds: 15
    timeoutSeconds: 1
  nginxConfig:
    schema: http
    enableIPv6: true
    logFormat: |-
      main '$remote_addr - $remote_user [$time_local]  $status '
              '"$request" $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for"';
    serverSnippet: ""
    httpSnippet: >-
      {{ if .Values.loki.tenants }}proxy_set_header X-Scope-OrgID $remote_user;{{ end }}
    locationSnippet: ""
    clientMaxBodySize: 4M
    ssl: false
    customReadUrl: null
    customWriteUrl: null
    customBackendUrl: null
    resolver: ""
    file: |
      {{- include "loki.nginxFile" . -}}
enterpriseGateway:
  replicas: 1
  hostAliases: []
  extraArgs: {}
  extraEnvFrom: []
  labels: {}
  annotations: {}
  service:
    type: ClusterIP
    labels: {}
    annotations: {}
  podSecurityContext:
    runAsNonRoot: true
    runAsGroup: 10001
    runAsUser: 10001
    fsGroup: 10001
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
  useDefaultProxyURLs: true
  strategy:
    type: RollingUpdate
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  resources: {}
  env: []
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  affinity: {}
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  terminationGracePeriodSeconds: 60
ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
  labels: {}
  paths:
    distributor:
      - /api/prom/push
      - /loki/api/v1/push
      - /otlp/v1/logs
      - /ui
    queryFrontend:
      - /api/prom/query
      - /api/prom/label
      - /api/prom/series
      - /api/prom/tail
      - /loki/api/v1/query
      - /loki/api/v1/query_range
      - /loki/api/v1/tail
      - /loki/api/v1/label
      - /loki/api/v1/labels
      - /loki/api/v1/series
      - /loki/api/v1/index/stats
      - /loki/api/v1/index/volume
      - /loki/api/v1/index/volume_range
      - /loki/api/v1/format_query
      - /loki/api/v1/detected_field
      - /loki/api/v1/detected_fields
      - /loki/api/v1/detected_labels
      - /loki/api/v1/patterns
    ruler:
      - /api/prom/rules
      - /api/prom/api/v1/rules
      - /api/prom/api/v1/alerts
      - /loki/api/v1/rules
      - /prometheus/api/v1/rules
      - /prometheus/api/v1/alerts
    compactor:
      - /loki/api/v1/delete
  hosts:
    - loki.example.com
  tls: []


migrate:
  fromDistributed:
    enabled: false
    memberlistService: ""

singleBinary:
  replicas: 0
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  selectorLabels: {}
  service:
    annotations: {}
    labels: {}
  targetModule: "all"
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraContainers: []
  initContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: single-binary
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  tolerations: []
  persistence:
    enableStatefulSetAutoDeletePVC: true
    enabled: true
    size: 10Gi
    storageClass: null
    selector: null
    annotations: {}
    labels: {}

write:
  replicas: 3
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
    behavior:
      scaleUp:
        policies:
          - type: Pods
            value: 1
            periodSeconds: 900
      scaleDown:
        policies:
          - type: Pods
            value: 1
            periodSeconds: 1800
        stabilizationWindowSeconds: 3600
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  selectorLabels: {}
  service:
    annotations: {}
    labels: {}
  targetModule: "write"
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  lifecycle: {}
  initContainers: []
  extraContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  extraVolumeClaimTemplates: []
  resources: {}
  terminationGracePeriodSeconds: 300
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: write
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  podManagementPolicy: "Parallel"
  persistence:
    volumeClaimsEnabled: true
    dataVolumeParameters:
      emptyDir: {}
    enableStatefulSetAutoDeletePVC: false
    size: 10Gi
    storageClass: null
    selector: null
    annotations: {}
    labels: {}
read:
  replicas: 3
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
    behavior: {}
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  selectorLabels: {}
  service:
    annotations: {}
    labels: {}
  targetModule: "read"
  legacyReadTarget: false
  extraArgs: []
  extraContainers: []
  extraEnv: []
  extraEnvFrom: []
  lifecycle: {}
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  livenessProbe: {}
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: read
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  podManagementPolicy: "Parallel"
  persistence:
    enableStatefulSetAutoDeletePVC: true
    size: 10Gi
    storageClass: null
    selector: null
    annotations: {}
    labels: {}
backend:
  replicas: 3
  autoscaling:
    enabled: false
    minReplicas: 3
    maxReplicas: 6
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
    behavior: {}
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  selectorLabels: {}
  service:
    annotations: {}
    labels: {}
  targetModule: "backend"
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  initContainers: []
  extraContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  terminationGracePeriodSeconds: 300
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: backend
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  podManagementPolicy: "Parallel"
  persistence:
    volumeClaimsEnabled: true
    dataVolumeParameters:
      emptyDir: {}
    enableStatefulSetAutoDeletePVC: true
    size: 10Gi
    storageClass: null
    selector: null
    annotations: {}
    labels: {}

ingester:
  replicas: 0
  hostAliases: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
    customMetrics: []
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
  image:
    registry: null
    repository: null
    tag: null
  command: null
  labels: {}
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 300
  lifecycle: {}
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/component: ingester
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: ingester
          topologyKey: kubernetes.io/hostname
  maxUnavailable: 1
  nodeSelector: {}
  tolerations: []
  readinessProbe: {}
  livenessProbe: {}
  updateStrategy:
    type: RollingUpdate
  persistence:
    enabled: false
    inMemory: false
    claims:
      - name: data
        size: 10Gi
        storageClass: null
    enableStatefulSetAutoDeletePVC: false
    whenDeleted: Retain
    whenScaled: Retain
  appProtocol:
    grpc: ""
  zoneAwareReplication:
    enabled: true
    maxUnavailablePct: 33
    zoneA:
      nodeSelector: null
      extraAffinity: {}
      annotations: {}
      podAnnotations: {}
    zoneB:
      nodeSelector: null
      extraAffinity: {}
      annotations: {}
      podAnnotations: {}
    zoneC:
      nodeSelector: null
      extraAffinity: {}
      annotations: {}
      podAnnotations: {}
    migration:
      enabled: false
      excludeDefaultZone: false
      readPath: false
      writePath: false

  rolloutGroupPrefix: null
  addIngesterNamePrefix: false

distributor:
  replicas: 0
  hostAliases: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
    customMetrics: []
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: distributor
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  maxSurge: 0
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  appProtocol:
    grpc: ""
  trafficDistribution: ""
querier:
  replicas: 0
  hostAliases: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
    customMetrics: []
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 30
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/component: querier
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: querier
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  maxSurge: 0
  nodeSelector: {}
  tolerations: []
  dnsConfig: {}
  appProtocol:
    grpc: ""
queryFrontend:
  replicas: 0
  hostAliases: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
    customMetrics: []
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: query-frontend
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  appProtocol:
    grpc: ""
queryScheduler:
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: query-scheduler
          topologyKey: kubernetes.io/hostname
  maxUnavailable: 1
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  appProtocol:
    grpc: ""
indexGateway:
  replicas: 0
  joinMemberlist: true
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 300
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: index-gateway
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  persistence:
    enabled: false
    inMemory: false
    size: 10Gi
    storageClass: null
    annotations: {}
    labels: {}
    enableStatefulSetAutoDeletePVC: false
    whenDeleted: Retain
    whenScaled: Retain
  appProtocol:
    grpc: ""
  updateStrategy:
    type: RollingUpdate
compactor:
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: compactor
          topologyKey: kubernetes.io/hostname
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  readinessProbe: {}
  livenessProbe: {}
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 30
  nodeSelector: {}
  tolerations: []
  appProtocol:
    grpc: ""
  persistence:
    enabled: false
    size: 10Gi
    storageClass: null
    claims:
      - name: data
        size: 10Gi
        storageClass: null
        annotations: {}
        labels: {}
    enableStatefulSetAutoDeletePVC: false
    whenDeleted: Retain
    whenScaled: Retain
  serviceAccount:
    create: false
    name: null
    imagePullSecrets: []
    annotations: {}
    automountServiceAccountToken: true
bloomGateway:
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: bloom-gateway
          topologyKey: kubernetes.io/hostname
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  readinessProbe: {}
  livenessProbe: {}
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 30
  nodeSelector: {}
  tolerations: []
  appProtocol:
    grpc: ""
  persistence:
    enabled: false
    annotations: {}
    labels: {}
    claims:
      - name: data
        size: 10Gi
        storageClass: null
    enableStatefulSetAutoDeletePVC: false
    whenDeleted: Retain
    whenScaled: Retain
  serviceAccount:
    create: false
    name: null
    imagePullSecrets: []
    annotations: {}
    automountServiceAccountToken: true
bloomPlanner:
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: bloom-planner
          topologyKey: kubernetes.io/hostname
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  readinessProbe: {}
  livenessProbe: {}
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 30
  nodeSelector: {}
  tolerations: []
  appProtocol:
    grpc: ""
  persistence:
    enabled: false
    claims:
      - name: data
        size: 10Gi
        storageClass: null
        annotations: {}
        labels: {}
    enableStatefulSetAutoDeletePVC: false
    whenDeleted: Retain
    whenScaled: Retain
  serviceAccount:
    create: false
    name: null
    imagePullSecrets: []
    annotations: {}
    automountServiceAccountToken: true
bloomBuilder:
  replicas: 0
  hostAliases: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
    customMetrics: []
    behavior:
      enabled: false
      scaleDown: {}
      scaleUp: {}
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: bloom-builder
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  nodeSelector: {}
  tolerations: []
  appProtocol:
    grpc: ""
patternIngester:
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: pattern-ingester
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  readinessProbe: {}
  livenessProbe: {}
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 30
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  appProtocol:
    grpc: ""
  persistence:
    enabled: false
    size: 10Gi
    storageClass: null
    claims:
      - name: data
        size: 10Gi
        storageClass: null
        annotations: {}
        labels: {}
    enableStatefulSetAutoDeletePVC: false
    whenDeleted: Retain
    whenScaled: Retain
  serviceAccount:
    create: false
    name: null
    imagePullSecrets: []
    annotations: {}
    automountServiceAccountToken: true
ruler:
  enabled: true
  sidecar: false
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 300
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: ruler
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  dnsConfig: {}
  persistence:
    enabled: false
    size: 10Gi
    storageClass: null
    annotations: {}
    labels: {}
  appProtocol:
    grpc: ""
  directories: {}

overridesExporter:
  enabled: false
  replicas: 0
  hostAliases: []
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  serviceLabels: {}
  serviceAnnotations: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  initContainers: []
  terminationGracePeriodSeconds: 300
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: overrides-exporter
          topologyKey: kubernetes.io/hostname
  maxUnavailable: null
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  appProtocol:
    grpc: ""

memcached:
  enabled: true
  image:
    repository: memcached
    tag: 1.6.38-alpine
    pullPolicy: IfNotPresent
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 11211
    runAsGroup: 11211
    fsGroup: 11211
  priorityClassName: null
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop: [ALL]
    allowPrivilegeEscalation: false
  readinessProbe:
    tcpSocket:
      port: client
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 6
  livenessProbe:
    tcpSocket:
      port: client
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

memcachedExporter:
  enabled: true
  image:
    repository: prom/memcached-exporter
    tag: v0.15.3
    pullPolicy: IfNotPresent
  resources:
    requests: {}
    limits: {}
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop: [ALL]
    allowPrivilegeEscalation: false
  extraArgs: {}
  livenessProbe:
    httpGet:
      path: /metrics
      port: http-metrics
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /metrics
      port: http-metrics
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

resultsCache:
  enabled: true
  addresses: dnssrvnoa+_memcached-client._tcp.{{ include "loki.resourceName" (dict "ctx" $ "component" "results-cache") }}.{{ $.Release.Namespace }}.svc
  defaultValidity: 12h
  timeout: 500ms
  replicas: 1
  port: 11211
  allocatedMemory: 1024
  maxItemMemory: 5
  connectionLimit: 16384
  writebackSizeLimit: 500MB
  writebackBuffer: 500000
  writebackParallelism: 1
  initContainers: []
  annotations: {}
  nodeSelector: {}
  affinity: {}
  topologySpreadConstraints: []
  tolerations: []
  maxUnavailable: 1
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  podManagementPolicy: Parallel
  terminationGracePeriodSeconds: 60
  statefulStrategy:
    type: RollingUpdate
  extraExtendedOptions: ""
  extraArgs: {}
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  resources: null
  service:
    annotations: {}
    labels: {}
  persistence:
    enabled: false
    storageSize: 10G
    storageClass: null
    mountPath: /data
    labels: {}
chunksCache:
  suffix: ""
  enabled: true
  addresses: dnssrvnoa+_memcached-client._tcp.{{ include "loki.resourceName" (dict "ctx" $ "component" "chunks-cache" "suffix" $.Values.chunksCache.suffix ) }}.{{ $.Release.Namespace }}.svc
  batchSize: 4
  parallelism: 5
  timeout: 2000ms
  defaultValidity: 0s
  replicas: 1
  port: 11211
  allocatedMemory: 8192
  maxItemMemory: 5
  connectionLimit: 16384
  writebackSizeLimit: 500MB
  writebackBuffer: 500000
  writebackParallelism: 1
  initContainers: []
  annotations: {}
  nodeSelector: {}
  affinity: {}
  topologySpreadConstraints: []
  tolerations: []
  maxUnavailable: 1
  priorityClassName: null
  podLabels: {}
  podAnnotations: {}
  podManagementPolicy: Parallel
  terminationGracePeriodSeconds: 60
  statefulStrategy:
    type: RollingUpdate
  extraExtendedOptions: ""
  extraArgs: {}
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  resources: null
  service:
    annotations: {}
    labels: {}
  persistence:
    enabled: false
    storageSize: 10G
    storageClass: null
    mountPath: /data
    labels: {}
  l2:
    suffix: "l2"
    l2ChunkCacheHandoff: 345600s
    enabled: false
    addresses: dnssrvnoa+_memcached-client._tcp.{{ include "loki.resourceName" (dict "ctx" $ "component" "chunks-cache" "suffix" $.Values.chunksCache.l2.suffix ) }}.{{ $.Release.Namespace }}.svc
    batchSize: 4
    parallelism: 5
    timeout: 2000ms
    defaultValidity: 0s
    replicas: 1
    port: 11211
    allocatedMemory: 8192
    maxItemMemory: 5
    connectionLimit: 16384
    writebackSizeLimit: 500MB
    writebackBuffer: 500000
    writebackParallelism: 1
    initContainers: []
    annotations: {}
    nodeSelector: {}
    affinity: {}
    topologySpreadConstraints: []
    tolerations: []
    maxUnavailable: 1
    priorityClassName: null
    podLabels: {}
    podAnnotations: {}
    podManagementPolicy: Parallel
    terminationGracePeriodSeconds: 60
    statefulStrategy:
      type: RollingUpdate
    extraExtendedOptions: ""
    extraArgs: {}
    extraContainers: []
    extraVolumes: []
    extraVolumeMounts: []
    resources: null
    service:
      annotations: {}
      labels: {}
    persistence:
      enabled: false
      storageSize: 10G
      storageClass: null
      mountPath: /data
      labels: {}
rollout_operator:
  enabled: false
  podSecurityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsNonRoot: true
    runAsUser: 10001
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop: [ALL]
    allowPrivilegeEscalation: false
minio:
  enabled: false
  replicas: 1
  drivesPerNode: 2
  rootUser: root-user
  rootPassword: supersecretpassword
  users:
    - accessKey: logs-user
      secretKey: supersecretpassword
      policy: readwrite
  buckets:
    - name: chunks
      policy: none
      purge: false
    - name: ruler
      policy: none
      purge: false
    - name: admin
      policy: none
      purge: false
  persistence:
    size: 5Gi
    annotations: {}
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
  address: null
extraObjects: []

sidecar:
  image:
    repository: kiwigrid/k8s-sidecar
    tag: 1.30.7
    sha: ""
    pullPolicy: IfNotPresent
  resources: {}
  securityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
  skipTlsVerify: false
  enableUniqueFilenames: false
  readinessProbe: {}
  livenessProbe: {}
  startupProbe: {}
  rules:
    enabled: true
    label: loki_rule
    labelValue: ""
    folder: /rules
    folderAnnotation: null
    searchNamespace: null
    watchMethod: WATCH
    resource: both
    script: null
    watchServerTimeout: 60
    watchClientTimeout: 60
    logLevel: INFO

monitoring:
  dashboards:
    enabled: false
    namespace: null
    annotations: {}
    labels:
      grafana_dashboard: "1"
  rules:
    enabled: false
    alerting: true
    disabled: {}
    namespace: null
    annotations: {}
    labels: {}
    additionalRuleLabels: {}
    additionalGroups: []
  serviceMonitor:
    enabled: false
    namespaceSelector: {}
    annotations: {}
    labels: {}
    interval: 15s
    scrapeTimeout: null
    relabelings: []
    metricRelabelings: []
    scheme: http
    tlsConfig: null
    metricsInstance:
      enabled: true
      annotations: {}
      labels: {}
      remoteWrite: null
  selfMonitoring:
    enabled: false
    tenant:
      name: "self-monitoring"
      password: null
      secretNamespace: "{{ .Release.Namespace }}"
    grafanaAgent:
      installOperator: false
      annotations: {}
      labels: {}
      enableConfigReadAPI: false
      priorityClassName: null
      resources: {}
      tolerations: []
    podLogs:
      apiVersion: monitoring.grafana.com/v1alpha1
      annotations: {}
      labels: {}
      relabelings: []
      additionalPipelineStages: []
    logsInstance:
      annotations: {}
      labels: {}
      clients: null
tableManager:
  enabled: false
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  annotations: {}
  podAnnotations: {}
  service:
    annotations: {}
    labels: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: table-manager
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  tolerations: []
  retention_deletes_enabled: false
  retention_period: 0
